<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Task Manager</title>
    <style>
        body {
            box-sizing: border-box;
            margin: 0;
            padding: 20px;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            min-height: 100%;
            color: #2c3e50;
            position: relative;
            transition: all 0.3s ease;
        }

        html {
            height: 100%;
        }

        /* Dark mode styles */
        body.dark-mode {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 50%, #2c3e50 100%);
        }

        body.dark-mode .container {
            background: rgba(52, 73, 94, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        body.dark-mode .title,
        body.dark-mode .stats,
        body.dark-mode .todo-text {
            color: #ecf0f1;
        }

        body.dark-mode .subtitle {
            color: #bdc3c7;
        }

        body.dark-mode .task-input,
        body.dark-mode .todo-item,
        body.dark-mode .stats,
        body.dark-mode .search-input,
        body.dark-mode .filter-select,
        body.dark-mode .category-select,
        body.dark-mode .priority-select {
            background: #34495e;
            border-color: #4a5f7a;
            color: #ecf0f1;
        }

        body.dark-mode .task-input:focus,
        body.dark-mode .search-input:focus,
        body.dark-mode .filter-select:focus,
        body.dark-mode .category-select:focus,
        body.dark-mode .priority-select:focus {
            border-color: #667eea;
        }

        body.dark-mode .todo-item.completed {
            background: #2c3e50;
        }

        .theme-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background: none;
            border: 2px solid #667eea;
            border-radius: 25px;
            padding: 8px 16px;
            cursor: pointer;
            font-size: 0.9rem;
            color: #667eea;
            transition: all 0.2s ease;
            z-index: 10;
        }

        .theme-toggle:hover {
            background: #667eea;
            color: white;
        }

        body.dark-mode .theme-toggle {
            border-color: #ecf0f1;
            color: #ecf0f1;
        }

        body.dark-mode .theme-toggle:hover {
            background: #ecf0f1;
            color: #2c3e50;
        }

        /* Subtle geometric background */
        .background-pattern {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
            opacity: 0.1;
        }

        .geometric-shape {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            animation: gentleFloat 8s ease-in-out infinite;
        }

        .shape1 { width: 100px; height: 100px; top: 10%; left: 10%; animation-delay: 0s; }
        .shape2 { width: 60px; height: 60px; top: 30%; right: 15%; animation-delay: 2s; }
        .shape3 { width: 80px; height: 80px; bottom: 20%; left: 20%; animation-delay: 4s; }
        .shape4 { width: 40px; height: 40px; top: 60%; right: 30%; animation-delay: 6s; }

        @keyframes gentleFloat {
            0%, 100% { transform: translateY(0px); opacity: 0.1; }
            50% { transform: translateY(-15px); opacity: 0.2; }
        }

        .container {
            max-width: 700px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(20px);
            position: relative;
            z-index: 2;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .title {
            font-size: 2.5rem;
            color: #2c3e50;
            margin: 0;
            font-weight: 700;
            letter-spacing: -1px;
            position: relative;
        }

        .subtitle {
            font-size: 1.1rem;
            color: #7f8c8d;
            margin: 12px 0 0 0;
            font-weight: 400;
        }

        .input-section {
            margin-bottom: 35px;
        }

        .input-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .task-input {
            flex: 1;
            min-width: 200px;
            padding: 16px 20px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            font-family: inherit;
            outline: none;
            transition: all 0.2s ease;
            background: white;
        }

        .task-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .category-select,
        .priority-select {
            padding: 16px 20px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            font-family: inherit;
            outline: none;
            transition: all 0.2s ease;
            background: white;
            cursor: pointer;
            min-width: 120px;
        }

        .category-select:focus,
        .priority-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .add-btn {
            padding: 16px 28px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .add-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
        }

        .controls-section {
            display: flex;
            gap: 15px;
            margin-bottom: 25px;
            flex-wrap: wrap;
            align-items: center;
        }

        .search-input {
            flex: 1;
            min-width: 200px;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 0.9rem;
            font-family: inherit;
            outline: none;
            transition: all 0.2s ease;
            background: white;
        }

        .search-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .filter-select {
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 0.9rem;
            font-family: inherit;
            outline: none;
            transition: all 0.2s ease;
            background: white;
            cursor: pointer;
        }

        .filter-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            padding: 20px;
            background: white;
            border-radius: 16px;
            font-weight: 600;
            color: #2c3e50;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
            border: 1px solid #f1f3f4;
        }

        .todo-list {
            max-height: 400px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .todo-item {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 18px 20px;
            margin-bottom: 12px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
            transition: all 0.2s ease;
            border: 1px solid #f1f3f4;
            position: relative;
        }

        .todo-item:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-color: #e9ecef;
        }

        .todo-item.completed {
            opacity: 0.6;
            background: #f8f9fa;
        }

        .priority-indicator {
            width: 4px;
            height: 100%;
            position: absolute;
            left: 0;
            top: 0;
            border-radius: 12px 0 0 12px;
        }

        .priority-high { background: #e74c3c; }
        .priority-medium { background: #f39c12; }
        .priority-low { background: #27ae60; }

        .category-tag {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            color: white;
            margin-right: 8px;
        }

        .category-work { background: #3498db; }
        .category-personal { background: #9b59b6; }
        .category-health { background: #e74c3c; }
        .category-learning { background: #f39c12; }
        .category-other { background: #95a5a6; }

        .todo-checkbox {
            width: 20px;
            height: 20px;
            border-radius: 6px;
            border: 2px solid #cbd5e0;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            flex-shrink: 0;
        }

        .todo-checkbox.checked {
            background: #667eea;
            border-color: #667eea;
        }

        .todo-checkbox.checked::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-weight: 600;
            font-size: 12px;
        }

        .todo-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .todo-text {
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .todo-text.completed {
            text-decoration: line-through;
            color: #999;
        }

        .todo-meta {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .delete-btn {
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 8px;
            width: 32px;
            height: 32px;
            cursor: pointer;
            font-size: 1.1rem;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .delete-btn:hover {
            background: #c0392b;
            transform: scale(1.05);
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #999;
            font-size: 1.2rem;
        }

        .empty-emoji {
            font-size: 3rem;
            margin-bottom: 15px;
            display: block;
        }

        .clear-all-btn {
            width: 100%;
            padding: 16px;
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            margin-top: 24px;
            transition: all 0.2s ease;
        }

        .clear-all-btn:hover {
            background: #5a6268;
            transform: translateY(-1px);
        }

        @media (max-width: 600px) {
            .container {
                margin: 10px;
                padding: 25px;
            }
            
            .input-row,
            .controls-section {
                flex-direction: column;
            }
            
            .stats {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }

            .todo-meta {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <button class="theme-toggle" onclick="toggleTheme()">🌙 Dark</button>

    <!-- Subtle geometric background -->
    <div class="background-pattern">
        <div class="geometric-shape shape1"></div>
        <div class="geometric-shape shape2"></div>
        <div class="geometric-shape shape3"></div>
        <div class="geometric-shape shape4"></div>
    </div>

    <div class="container">
        <div class="header">
            <h1 class="title">Advanced Task Manager</h1>
            <p class="subtitle">Stay organized with categories, priorities, and smart filtering</p>
        </div>

        <div class="input-section">
            <div class="input-row">
                <input type="text" class="task-input" placeholder="Add a new task..." id="taskInput">
                <select class="category-select" id="categorySelect">
                    <option value="work">Work</option>
                    <option value="personal">Personal</option>
                    <option value="health">Health</option>
                    <option value="learning">Learning</option>
                    <option value="other">Other</option>
                </select>
                <select class="priority-select" id="prioritySelect">
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                    <option value="low">Low</option>
                </select>
            </div>
            <button class="add-btn" onclick="addTask()">Add Task</button>
        </div>

        <div class="controls-section">
            <input type="text" class="search-input" placeholder="Search tasks..." id="searchInput">
            <select class="filter-select" id="filterSelect">
                <option value="all">All Tasks</option>
                <option value="active">Active</option>
                <option value="completed">Completed</option>
                <option value="work">Work</option>
                <option value="personal">Personal</option>
                <option value="health">Health</option>
                <option value="learning">Learning</option>
                <option value="other">Other</option>
                <option value="high">High Priority</option>
                <option value="medium">Medium Priority</option>
                <option value="low">Low Priority</option>
            </select>
        </div>

        <div class="stats">
            <span>Total: <span id="totalTasks">0</span></span>
            <span>Completed: <span id="completedTasks">0</span></span>
            <span>Remaining: <span id="remainingTasks">0</span></span>
        </div>

        <div class="todo-list" id="todoList">
            <div class="empty-state">
                <span class="empty-emoji">📋</span>
                No tasks yet. Add one above to get started.
            </div>
        </div>

        <button class="clear-all-btn" onclick="clearAllTasks()" id="clearAllBtn" style="display: none;">
            Clear All Tasks
        </button>
    </div>

    <script>
        let tasks = JSON.parse(localStorage.getItem('advancedTaskManagerTasks')) || [];
        let taskIdCounter = parseInt(localStorage.getItem('taskIdCounter')) || 1;
        let currentFilter = 'all';
        let searchQuery = '';

        function saveTasks() {
            localStorage.setItem('advancedTaskManagerTasks', JSON.stringify(tasks));
            localStorage.setItem('taskIdCounter', taskIdCounter.toString());
        }

        function toggleTheme() {
            const body = document.body;
            const themeToggle = document.querySelector('.theme-toggle');
            
            body.classList.toggle('dark-mode');
            
            if (body.classList.contains('dark-mode')) {
                themeToggle.textContent = '☀️ Light';
                localStorage.setItem('theme', 'dark');
            } else {
                themeToggle.textContent = '🌙 Dark';
                localStorage.setItem('theme', 'light');
            }
        }

        function addTask() {
            const input = document.getElementById('taskInput');
            const categorySelect = document.getElementById('categorySelect');
            const prioritySelect = document.getElementById('prioritySelect');
            const taskText = input.value.trim();
            
            if (taskText === '') {
                input.style.borderColor = '#e74c3c';
                setTimeout(() => {
                    input.style.borderColor = '#e9ecef';
                }, 1000);
                return;
            }

            const newTask = {
                id: taskIdCounter++,
                text: taskText,
                completed: false,
                category: categorySelect.value,
                priority: prioritySelect.value,
                createdAt: new Date().toISOString()
            };

            tasks.unshift(newTask);
            input.value = '';
            
            saveTasks();
            renderTasks();
            updateStats();
        }

        function toggleTask(taskId) {
            const task = tasks.find(t => t.id === taskId);
            if (task) {
                task.completed = !task.completed;
                saveTasks();
                renderTasks();
                updateStats();
            }
        }

        function deleteTask(taskId) {
            tasks = tasks.filter(t => t.id !== taskId);
            saveTasks();
            renderTasks();
            updateStats();
        }

        function clearAllTasks() {
            tasks = [];
            saveTasks();
            renderTasks();
            updateStats();
        }

        function filterTasks() {
            return tasks.filter(task => {
                // Search filter
                const matchesSearch = task.text.toLowerCase().includes(searchQuery.toLowerCase());
                
                // Category/Status filter
                let matchesFilter = true;
                switch(currentFilter) {
                    case 'active':
                        matchesFilter = !task.completed;
                        break;
                    case 'completed':
                        matchesFilter = task.completed;
                        break;
                    case 'work':
                    case 'personal':
                    case 'health':
                    case 'learning':
                    case 'other':
                        matchesFilter = task.category === currentFilter;
                        break;
                    case 'high':
                    case 'medium':
                    case 'low':
                        matchesFilter = task.priority === currentFilter;
                        break;
                    default:
                        matchesFilter = true;
                }
                
                return matchesSearch && matchesFilter;
            });
        }

        function renderTasks() {
            const todoList = document.getElementById('todoList');
            const clearAllBtn = document.getElementById('clearAllBtn');
            const filteredTasks = filterTasks();
            
            if (filteredTasks.length === 0) {
                const emptyMessage = tasks.length === 0 
                    ? "No tasks yet. Add one above to get started."
                    : "No tasks match your current filter.";
                    
                todoList.innerHTML = `
                    <div class="empty-state">
                        <span class="empty-emoji">📋</span>
                        ${emptyMessage}
                    </div>
                `;
                clearAllBtn.style.display = tasks.length > 0 ? 'block' : 'none';
                return;
            }

            clearAllBtn.style.display = 'block';
            
            todoList.innerHTML = filteredTasks.map(task => `
                <div class="todo-item ${task.completed ? 'completed' : ''}">
                    <div class="priority-indicator priority-${task.priority}"></div>
                    <div class="todo-checkbox ${task.completed ? 'checked' : ''}" 
                         onclick="toggleTask(${task.id})"></div>
                    <div class="todo-content">
                        <span class="todo-text ${task.completed ? 'completed' : ''}">${task.text}</span>
                        <div class="todo-meta">
                            <span class="category-tag category-${task.category}">${task.category}</span>
                            <span style="font-size: 0.8rem; color: #999;">${task.priority} priority</span>
                        </div>
                    </div>
                    <button class="delete-btn" onclick="deleteTask(${task.id})">×</button>
                </div>
            `).join('');
        }

        function updateStats() {
            const total = tasks.length;
            const completed = tasks.filter(t => t.completed).length;
            const remaining = total - completed;

            document.getElementById('totalTasks').textContent = total;
            document.getElementById('completedTasks').textContent = completed;
            document.getElementById('remainingTasks').textContent = remaining;
        }

        // Event listeners
        document.getElementById('taskInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTask();
            }
        });

        document.getElementById('searchInput').addEventListener('input', function(e) {
            searchQuery = e.target.value;
            renderTasks();
        });

        document.getElementById('filterSelect').addEventListener('change', function(e) {
            currentFilter = e.target.value;
            renderTasks();
        });

        // Initialize theme
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            document.body.classList.add('dark-mode');
            document.querySelector('.theme-toggle').textContent = '☀️ Light';
        }

        // Initialize the app
        renderTasks();
        updateStats();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98f1c3fbd1df4425',t:'MTc2MDU1Njk4OS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
